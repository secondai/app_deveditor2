{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainDirectTalkComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "331c92f4-b4f4-40f0-8112-9a18092d6ea7",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            value: ''\n          }\n        }\n        \n        componentDidMount(){\n          console.log('NodeEditorComponent componentDidMount');\n          this.resizeAce();\n          this.handleKeyDown();\n          \n        }\n        \n        componentWillUnmount(){\n          \n        }\n        \n        componentWillReceiveProps(nextProps, nextState){\n          \n          // resizing helpers for Ace height\n          if(!nextProps.state.newWindowSize || \n            this.state.windowHeight != nextProps.state.newWindowSize[1]){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n          if(nextState.aceHeight == -1){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n        }\n        \n        @autobind\n        resizeAce(){\n          if(!this.parentRef){\n            this.setState({\n              aceHeight: null\n            })\n            return;\n          }\n          // console.log('Resize ace', this.parentRef.offsetHeight);\n          this.setState({\n            aceHeight: this.parentRef.offsetHeight\n          },()=>{\n            if(this.aceRef){\n              this.aceRef.editor.resize();\n            }\n          })\n        }\n      \n        @autobind\n        handleKeyDown(e){\n          if(this.aceRef && this.aceRef.editor){\n            this.aceRef.editor.commands.addCommand({\n              name: 'save',\n              bindKey: {\n                win: 'Ctrl-S',\n                mac: 'Command-S'\n              },\n              exec: (env, args, request)=>{\n                // this.saveDataUpdates();\n                console.log('command+s does nothing');\n              }\n            });\n            \n            // overwrite Cmd-D to same as sublime \n            this.aceRef.editor.commands.addCommand({\n              name: 'selectMoreAfter2',\n              bindKey: {\n                win: 'Ctrl-D',\n                mac: 'Command-D'\n              },\n              exec: (env, args, request)=>{\n                // selectMoreAfter\n                // console.log('selectMoreAfter!');\n                this.aceRef.editor.execCommand(\"selectMoreAfter\")\n              }\n            });\n          }\n      \n        }\n        \n        @autobind\n        handleSend(){\n          return new Promise(async (resolve,reject)=>{\n            \n            let RequestNode;\n            try {\n              RequestNode = JSON.parse(this.state.value)\n            }catch(err){\n              alert('Invalid JSON');\n              return;\n            }\n            \n            let findResponse = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                  RequestNode\n                }\n              }\n            });\n            \n          })\n        }\n        \n        @autobind\n        populateDefault(){\n          \n          let obj = {\n            type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n            data: {\n              actions: [\n                {\n                  matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                  dataForAction: {\n                    type: 'string:...',\n                    data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                  }\n                },\n                {\n                  matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                  dataForAction: {\n                    type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                    data: {\n                      // responseType: 'cjson',\n                      dataFilter: {\n                        nodeId: null\n                      },\n                      matchFunctionNode: {\n                        type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                        data: {\n                          code: `(()=>{\n                            let inputNode = INPUT.data.inputNode;\n                            if(inputNode.nodeId){\n                              return false;\n                            }\n                            return inputNode;\n                            \n                          })()`\n                        }\n                      },\n                    }\n                  }\n                }\n              ]\n              \n            }\n          }\n          \n          let value = JSON.stringify(obj, null, 2);\n          this.setState({value})\n        }\n        \n        render(){\n          \n          return (\n            <div className=\"flex-main\">\n              <div className=\"flex-left\" style={{padding:'4px', width: '450px'}}>\n                \n                <button className=\"button is-primary\" onClick={this.handleSend}>\n                  Send\n                </button>\n                \n                <hr />\n                \n                <div style={{borderBottom: '1px solid #ccc'}} onClick={this.populateDefault}>\n                  authorized action sequence, get Root nodes \n                </div>\n                \n              </div>\n              <div className=\"flex-middle\">\n                \n                <AceEditor\n                  ref={r=>this.aceRef=r}\n                  mode=\"jsx\"\n                  theme=\"monokai\"\n                  value={this.state.value}\n                  onChange={v=>{\n                    this.setState({value: v})\n                  }}\n                  name=\"UNIQUE_ID_OF_DIV2\"\n                  editorProps={{$blockScrolling: true}}\n                  width=\"100%\"\n                  height=\"100%\"\n                  onLoad={editor=>{\n                    editor.getSession().setUseWrapMode(true);\n                  }}\n                  setOptions={{\n                    enableBasicAutocompletion: true,\n                    enableLiveAutocompletion: true,\n                    showPrintMargin: false,\n                    enableSnippets: true,\n                    behavioursEnabled: false,\n                    showLineNumbers: true,\n                    tabSize: 2\n                  }}\n                />\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainDirectTalkComponent"
  }
}